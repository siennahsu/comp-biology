# -*- coding: utf-8 -*-
"""gwas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aXarm-AWG9cT74CMghZDKp6OyiFAedU1

#Genome-wide association study
"""

import pandas as pd
import numpy as np
from scipy.stats import chi2_contingency
import warnings
warnings.filterwarnings('ignore')

"""## Data preprocessing"""

f_disease = open("/content/gwas_phenotypes.txt", "r")
y = f_disease.read()
y = y.split("\n")[:-1]

y_line = ""
for i in range(len(y)):
    y[i] = y[i][-1]
    y_line += y[i]
    y_line += ","

y_line = y_line[:-1] + "\n"

f_disease.close()

y_line = "x,x,x,x,x,x," + y_line

f_pop = open("/content/gwas_population.vcf", "r")

x = f_pop.read()

x = x.replace("\t", ",").replace("#", "")
f_csv = open("gwas_data.csv", "w")
f_csv.write(x)
f_csv.write(y_line)
f_pop.close()
f_csv.close()

df = pd.read_csv("/content/gwas_data.csv")

df.tail(10)

m = df.shape[0] - 1 # num of SNPs
n = 1000 # num of individuals

# a dataframe with healthy individuals
# Filter columns where the last row's value is 0
filtered_columns = df.columns[df.iloc[-1] == '0']

# Create a new DataFrame with only the selected columns
df_healthy = df[filtered_columns]

# a dataframe with sick individuals
# Filter columns where the last row's value is 0
filtered_columns = df.columns[df.iloc[-1] == '1']

# Create a new DataFrame with only the selected columns
df_sick = df[filtered_columns]

"""## $Ï‡^2$ test for all SNPs

"""

# store the results in a pandas dataframe
columns = ["SNP ID", "Uncorrected p-value", "Corrected p-value",
           "Disease odds ratio for heterozygous individuals",
           "Disease odds ratio for homozygous alternate individuals"]
results = pd.DataFrame(columns=columns)

# iterate through the SNPs to calculate
# if a table cell for a test has value 0, change it to 1

for i in range(m):
    # build a 2 x 3 table
    row_healthy = df_healthy.iloc[i].to_list()
    row_sick = df_sick.iloc[i].to_list()

    healthy_0 = row_healthy.count("0|0")
    healthy_1 = row_healthy.count("0|1") + row_healthy.count("1|0")
    healthy_2 = row_healthy.count("1|1")
    sick_0 = row_sick.count("0|0")
    sick_1 = row_sick.count("0|1") + row_sick.count("1|0")
    sick_2 = row_sick.count("1|1")

    if healthy_0 == 0:
        healthy_0 = 1
    if healthy_1 == 0:
        healthy_1 = 1
    if healthy_2 == 0:
        healthy_2 = 1
    if sick_0 == 0:
        sick_0 = 1
    if sick_1 == 0:
        sick_1 = 1
    if sick_2 == 0:
        sick_2 = 1

    table = np.array([[healthy_0, healthy_1, healthy_2], [sick_0, sick_1, sick_2]])
    res = chi2_contingency(table)

    new_row_data = {'SNP ID': df.iloc[i, 2], 'Uncorrected p-value': res.pvalue}
    results = results.append(new_row_data, ignore_index=True)

results.head(10)

"""## question b"""

uncor_pvalue_below_count = (results["Uncorrected p-value"] < 0.05).sum()
print(f"The number of SNPs with uncorrected p-value < 0.05 is {uncor_pvalue_below_count}")

"""##question c"""

for i in range(m):
    results.iloc[i, 2] = results.iloc[i, 1] * m

results.head(10)

# a dataframe with corrected p-value below 0.05
results_qualified = results[results["Corrected p-value"] < 0.05]

qualified_snps = results_qualified["SNP ID"].to_list()
index = []
for qualified_snp in qualified_snps:
    index.append(int(qualified_snp[3:]))

# calculate the probabilities for odds ratio for each snp
i = 0
for qualified_snp in qualified_snps:
    row = df.loc[df["ID"] == qualified_snp].values.tolist()[0]
    sick_row = df_sick.iloc[index[i]].values.tolist()

    p_het = (row.count("0|1") + row.count("1|0"))
    p_hom_alt = row.count("1|1")
    p_hom_ref = row.count("0|0")
    p_sick_het = sick_row.count("0|1") + sick_row.count("1|0")
    p_sick_hom_alt = sick_row.count("1|1")
    p_sick_hom_ref = sick_row.count("0|0")

    odds_ratio_het = (p_sick_het / p_het) / (p_sick_hom_ref / p_hom_ref)
    odds_ratio_hom_alt = (p_sick_hom_alt / p_hom_alt) / (p_sick_hom_ref / p_hom_ref)

    results_qualified.loc[results_qualified["SNP ID"] == qualified_snp, "Disease odds ratio for heterozygous individuals"] = odds_ratio_het
    results_qualified.loc[results_qualified["SNP ID"] == qualified_snp, "Disease odds ratio for homozygous alternate individuals"] = odds_ratio_hom_alt
    i += 1

results_qualified